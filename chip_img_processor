### Import library
import cv2 as cv
from cv2 import IMWRITE_JPEG2000_COMPRESSION_X1000
from cv2 import THRESH_BINARY
import numpy as np
import matplotlib.pyplot as plt
import scipy
from scipy.signal import find_peaks
from scipy.stats import linregress
import math
import pwlf

from img_separator import *
from fiber_img_processor import *

if __name__ == "__main__":

    def get_array(file):
        return cv.imread(file)

    def rescale(img, scale = 0.75):
        width = int (img.shape[1]*scale)
        height = int (img.shape[0]*scale)

        dimensions = (width,height)

        return cv.resize(img, dimensions, interpolation=cv.INTER_AREA)

    def canny_edge (img):
        edges = cv.Canny(img,10,50) #Arguments:  1) input image, 2) minVal, 3) maxVal, 4) aperture size (default = 3), 5) L2gradient
        return edges

    def adapt_thresh_otsu(img):
        ret1, th1 = cv.threshold(img, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)
        return th1

    def get_contours_array(img):
        blank = np.zeros(img.shape, dtype = 'uint8')
        contours, hierarchies = cv.findContours(img, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
        cv.drawContours(blank, contours, -1, (255,255,255), thickness=2)
        return blank
            
    ### Segment the image

    array = get_array('Photos/Photo_Fiber_Obj_10X.tif')
    gray = cv.cvtColor(array, cv.COLOR_BGR2GRAY)
    blur = cv.GaussianBlur(gray,(5,5),cv.BORDER_DEFAULT)  ##box

    img_left, img_right = img_separator (blur)
    left_img = rescale(img_left, scale=0.48)

    ### Printing processed image

    cv.imshow('Left',left_img)
    chip_image = canny_edge(left_img)
    #cv.imshow('Canny',chip_image)

    ## Calculating angle
    binary_chip = adapt_thresh_otsu(left_img)
    cv.imshow('Binary',binary_chip)

    if background_profiler(binary_chip) >= 150:
        fiber = contrast_enhancer(binary_chip)
        print('Contraste enhanced...')

        
    text, data = get_angle(binary_chip, 'last', 'horizontal', 10)
    cv.imshow('Canny', get_text(chip_image, text))

    cv.waitKey(0)