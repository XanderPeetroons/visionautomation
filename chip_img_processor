### Import library
import cv2 as cv
from cv2 import IMWRITE_JPEG2000_COMPRESSION_X1000
from cv2 import THRESH_BINARY
import numpy as np
import matplotlib.pyplot as plt
import scipy
from scipy.signal import find_peaks
from scipy.stats import linregress
import math
import pwlf
from PIL import Image

#from img_separator import *
from img_processing import *

if __name__ == "__main__":

    def get_array(file):
        return cv.imread(file)

    def rescale(img, scale = 0.75):
        width = int (img.shape[1]*scale)
        height = int (img.shape[0]*scale)

        dimensions = (width,height)

        return cv.resize(img, dimensions, interpolation=cv.INTER_AREA)

    def canny_edge (img):
        edges = cv.Canny(img,10,50) #Arguments:  1) input image, 2) minVal, 3) maxVal, 4) aperture size (default = 3), 5) L2gradient
        return edges

    def adapt_thresh_otsu(img):
        ret1, th1 = cv.threshold(img, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)
        return th1

    def get_contours_array(img):
        blank = np.zeros(img.shape, dtype = 'uint8')
        contours, hierarchies = cv.findContours(img, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
        cv.drawContours(blank, contours, -1, (255,255,255), thickness=2)
        return blank
  
    ### Segment the image

    #array = get_array('Photos/Photo_Fiber_Obj_10X.tif')
    array = get_array('Photos/Photo_Fiber_Obj_20X.tif')
    #array = get_array('Photos/Photo_Fiber_Obj_50X.tif')
    cv.imshow('Original image', rescale(array, scale = 0.48))
    gray = cv.cvtColor(array, cv.COLOR_BGR2GRAY)
    blur = cv.GaussianBlur(gray,(5,5),cv.BORDER_DEFAULT)  ##box

    img_left, img_right = img_separator (blur)
    left_img = rescale(img_left, scale=0.48)
    right_img = rescale(img_right, scale=0.48)

    ### Processing image for edges and angle calculation

    #cv.imshow('Left',left_img)
    chip_image = canny_edge(left_img)

    binary_chip = adapt_thresh_otsu(left_img)
    #cv.imshow('Binary',binary_chip)

    if background_profiler(binary_chip) >= 150:
        binary_chip = contrast_enhancer(binary_chip)
        print('Contraste enhanced...')

    ### Calculating angle

    textc, datac = get_angle(binary_chip, 'last', 'horizontal', 10)
    cv.imshow('Canny_chip', get_text(chip_image, textc))
    
    

    ### Merging processed images
    '''
    #new_left = chip_image[:, :(chip_image.shape[0]-50)]
    #cv.imshow('-50pix', new_left)
    #binary_fiber = adapt_thresh_otsu(right_img)

    if background_profiler(binary_chip) >= 150:
        binary_fiber = contrast_enhancer(binary_fiber)
        print('Contraste enhanced...')
    
    contour_fiber = get_contours_array(binary_fiber)
    textf, dataf = get_angle(contrast_enhancer(right_img), 'all', 'vertical', 10)
    #cv.imshow('Contour_fiber', get_text(contour_fiber, textf))

    post_process_img = img_join(chip_image,contour_fiber)  ### the 50 pixel margin is added
    cv.imshow('Joined image',post_process_img)
    '''

    cv.waitKey(0)